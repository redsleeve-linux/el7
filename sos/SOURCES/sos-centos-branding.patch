diff -uNrp sos-3.9.orig/sos/policies/redhat.py sos-3.9/sos/policies/redhat.py
--- sos-3.9.orig/sos/policies/redhat.py	2020-03-24 15:33:13.000000000 +0000
+++ sos-3.9/sos/policies/redhat.py	2020-10-03 12:48:32.088747085 +0000
@@ -89,7 +89,7 @@ class RedHatPolicy(LinuxPolicy):
     def check(cls):
         """This method checks to see if we are running on Red Hat. It must be
         overriden by concrete subclasses to return True when running on a
-        Fedora, RHEL or other Red Hat distribution or False otherwise."""
+        Fedora, CentOS, RHEL or other Red Hat distribution or False otherwise."""
         return False
 
     def check_usrmove(self, pkgs):
@@ -187,29 +187,29 @@ _opts_all_logs_verify = SoSOptions(all_l
 _cb_profiles = ['boot', 'storage', 'system']
 _cb_plugopts = ['boot.all-images=on', 'rpm.rpmva=on', 'rpm.rpmdb=on']
 
-RHEL_RELEASE_STR = "Red Hat Enterprise Linux"
+RHEL_RELEASE_STR = "CentOS Linux"
 
 RHV = "rhv"
-RHV_DESC = "Red Hat Virtualization"
+RHV_DESC = "Virtualization"
 
 RHEL = "rhel"
 RHEL_DESC = RHEL_RELEASE_STR
 
 RHOSP = "rhosp"
-RHOSP_DESC = "Red Hat OpenStack Platform"
+RHOSP_DESC = "OpenStack Platform"
 
 RHOCP = "ocp"
-RHOCP_DESC = "OpenShift Container Platform by Red Hat"
+RHOCP_DESC = "OpenShift Container Platform"
 RHOSP_OPTS = SoSOptions(plugopts=[
                              'process.lsof=off',
                              'networking.ethtool_namespaces=False',
                              'networking.namespaces=200'])
 
 RH_CFME = "cfme"
-RH_CFME_DESC = "Red Hat CloudForms"
+RH_CFME_DESC = "CloudForms"
 
 RH_SATELLITE = "satellite"
-RH_SATELLITE_DESC = "Red Hat Satellite"
+RH_SATELLITE_DESC = "Satellite"
 SAT_OPTS = SoSOptions(verify=True, plugopts=['apache.log=on'])
 
 CB = "cantboot"
@@ -257,8 +257,8 @@ RH_FTP_HOST = "ftp://dropbox.redhat.com"
 
 class RHELPolicy(RedHatPolicy):
     distro = RHEL_RELEASE_STR
-    vendor = "Red Hat"
-    vendor_url = "https://access.redhat.com/support/"
+    vendor = "CentOS"
+    vendor_url = "https://wiki.centos.org/support"
     msg = _("""\
 This command will collect diagnostic and configuration \
 information from this %(distro)s system and installed \
@@ -280,7 +280,7 @@ support representative.
     def check(cls):
         """Test to see if the running host is a RHEL installation.
 
-            Checks for the presence of the "Red Hat Enterprise Linux"
+            Checks for the presence of the "CentOS Linux"
             release string at the beginning of the NAME field in the
             `/etc/os-release` file and returns ``True`` if it is
             found, and ``False`` otherwise.
@@ -389,7 +389,7 @@ class CentOsPolicy(RHELPolicy):
 
 ATOMIC = "atomic"
 ATOMIC_RELEASE_STR = "Atomic"
-ATOMIC_DESC = "Red Hat Enterprise Linux Atomic Host"
+ATOMIC_DESC = "Atomic Host"
 
 atomic_presets = {
     ATOMIC: PresetDefaults(name=ATOMIC, desc=ATOMIC_DESC, note=NOTE_TIME,
@@ -398,7 +398,7 @@ atomic_presets = {
 
 
 class RedHatAtomicPolicy(RHELPolicy):
-    distro = "Red Hat Atomic Host"
+    distro = "Atomic Host"
     msg = _("""\
 This command will collect diagnostic and configuration \
 information from this %(distro)s system.
@@ -435,7 +435,7 @@ support representative.
 
 
 class RedHatCoreOSPolicy(RHELPolicy):
-    distro = "Red Hat CoreOS"
+    distro = "CoreOS"
     msg = _("""\
 This command will collect diagnostic and configuration \
 information from this %(distro)s system.
@@ -456,7 +456,7 @@ support representative.
         host_release = os.environ[ENV_HOST_SYSROOT] + cls._redhat_release
         try:
             for line in open(host_release, 'r').read().splitlines():
-                coreos |= 'Red Hat CoreOS' in line
+                coreos |= 'CoreOS' in line
         except IOError:
             pass
         return coreos
diff -uNrp sos-3.9.orig/sos/policies/redhat.py sos-3.9/sos/policies/redhat.py
--- sos-3.9.orig/sos/policies/redhat.py	2021-02-02 15:39:49.180326048 +0000
+++ sos-3.9/sos/policies/redhat.py	2021-02-02 15:44:02.907874181 +0000
@@ -31,9 +31,9 @@ except NameError:
 
 
 class RedHatPolicy(LinuxPolicy):
-    distro = "Red Hat"
-    vendor = "Red Hat"
-    vendor_url = "https://www.redhat.com/"
+    distro = "CentOS"
+    vendor = "CentOS"
+    vendor_url = "https://www.centos.org/"
     _redhat_release = '/etc/redhat-release'
     _tmp_dir = "/var/tmp"
     _rpmq_cmd = 'rpm -qa --queryformat "%{NAME}|%{VERSION}|%{RELEASE}\\n"'
@@ -87,9 +87,9 @@ class RedHatPolicy(LinuxPolicy):
 
     @classmethod
     def check(cls):
-        """This method checks to see if we are running on Red Hat. It must be
+        """This method checks to see if we are running on CentOS Linux. It must be
         overriden by concrete subclasses to return True when running on a
-        Fedora, CentOS, RHEL or other Red Hat distribution or False otherwise."""
+        Fedora, CentOS, RHEL or other CentOS distribution or False otherwise."""
         return False
 
     def check_usrmove(self, pkgs):
diff -uNrp sos-3.9.orig/sos/policies/redhat.py sos-3.9/sos/policies/redhat.py
--- sos-3.9.orig/sos/policies/redhat.py	2022-02-23 17:25:33.120951926 +0000
+++ sos-3.9/sos/policies/redhat.py	2022-02-23 17:27:58.698344937 +0000
@@ -313,7 +313,7 @@ support representative.
             return
         if self.case_id:
             self.upload_user = input(_(
-                "Enter your Red Hat Customer Portal username for uploading ["
+                "Enter your Customer Portal username for uploading ["
                 "empty for anonymous SFTP]: ")
             )
 
@@ -335,7 +335,7 @@ support representative.
 
     def get_upload_url_string(self):
         if self.get_upload_url().startswith(RH_API_HOST):
-            return "Red Hat Customer Portal"
+            return "Customer Portal"
         elif self.get_upload_url().startswith(RH_SFTP_HOST):
             return "Red Hat Secure FTP"
         return self.upload_url
@@ -403,7 +403,7 @@ support representative.
             if not self.upload_url.startswith(RH_API_HOST):
                 raise
             else:
-                print("Upload to Red Hat Customer Portal failed. Trying %s"
+                print("Upload to Customer Portal failed. Trying %s"
                       % RH_SFTP_HOST)
                 self.upload_url = RH_SFTP_HOST
                 uploaded = super(RHELPolicy, self).upload_archive(archive)
