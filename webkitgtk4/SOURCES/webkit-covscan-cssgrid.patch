From 2bdf948a157825aa8beaa17be620f92080bb371c Mon Sep 17 00:00:00 2001
From: "svillar@igalia.com"
 <svillar@igalia.com@268f45cc-cd09-0410-ab3c-d52691b4dbfc>
Date: Wed, 10 May 2017 07:42:46 +0000
Subject: [PATCH] [css-grid] Remove Blink-specific code for handling orthogonal
 grid items https://bugs.webkit.org/show_bug.cgi?id=171807

Reviewed by Darin Adler.

Source/WebCore:

This code was added in r203252 as part of a patch improving the handling of
{min|max}-content with orthogonal flows. The original code came from Blink which performs a
pre-layout of orthogonal boxes in FrameView. That is not true in the case of WebKit so we do
not need this code at all. Actually it was causing incorrect renderings in some tests.

I'm also removing an invalid return statement just after another return.

* rendering/GridTrackSizingAlgorithm.cpp:
(WebCore::GridTrackSizingAlgorithmStrategy::minContentForChild):
(WebCore::GridTrackSizingAlgorithmStrategy::maxContentForChild):

LayoutTests:

Updated the expectations. They should now be compatible with Firefox and Chrome.

* fast/css-grid-layout/grid-track-sizing-with-orthogonal-flows.html:
* fast/css-grid-layout/grid-track-sizing-with-percentages-and-orthogonal-flows.html:
* fast/css-grid-layout/repeating-layout-must-produce-the-same-results.html:

git-svn-id: http://svn.webkit.org/repository/webkit/trunk@216574 268f45cc-cd09-0410-ab3c-d52691b4dbfc

diff --git a/Source/WebCore/rendering/GridTrackSizingAlgorithm.cpp b/Source/WebCore/rendering/GridTrackSizingAlgorithm.cpp
index 570b21aa6ee..1b089bfa3c1 100644
--- a/Source/WebCore/rendering/GridTrackSizingAlgorithm.cpp
+++ b/Source/WebCore/rendering/GridTrackSizingAlgorithm.cpp
@@ -752,15 +752,6 @@ LayoutUnit GridTrackSizingAlgorithmStrategy::minContentForChild(RenderBox& child
         return child.minPreferredLogicalWidth() + marginIntrinsicLogicalWidthForChild(renderGrid(), child);
     }
 
-    // All orthogonal flow boxes were already laid out during an early layout phase performed in FrameView::performLayout.
-    // It's true that grid track sizing was not completed at that time and it may afffect the final height of a
-    // grid item, but since it's forbidden to perform a layout during intrinsic width computation, we have to use
-    // that computed height for now.
-    if (direction() == ForColumns && m_algorithm.m_sizingOperation == IntrinsicSizeComputation) {
-        ASSERT(renderGrid()->isOrthogonalChild(child));
-        return child.logicalHeight() + child.marginLogicalHeight();
-    }
-
     if (updateOverrideContainingBlockContentSizeForChild(child, childInlineDirection))
         child.setNeedsLayout(MarkOnlyThis);
     return logicalHeightForChild(child);
@@ -778,16 +769,6 @@ LayoutUnit GridTrackSizingAlgorithmStrategy::maxContentForChild(RenderBox& child
         // FIXME: It's unclear if we should return the intrinsic width or the preferred width.
         // See http://lists.w3.org/Archives/Public/www-style/2013Jan/0245.html
         return child.maxPreferredLogicalWidth() + marginIntrinsicLogicalWidthForChild(renderGrid(), child);
-        return child.maxPreferredLogicalWidth();
-    }
-
-    // All orthogonal flow boxes were already laid out during an early layout phase performed in
-    // FrameView::performLayout. It's true that grid track sizing was not completed at that time
-    // and it may afffect the final height of a grid item, but since it's forbidden to perform a
-    // layout during intrinsic width computation, we have to use that computed height for now.
-    if (direction() == ForColumns && m_algorithm.m_sizingOperation == IntrinsicSizeComputation) {
-        ASSERT(renderGrid()->isOrthogonalChild(child));
-        return child.logicalHeight() + child.marginLogicalHeight();
     }
 
     if (updateOverrideContainingBlockContentSizeForChild(child, childInlineDirection))
-- 
2.13.5

