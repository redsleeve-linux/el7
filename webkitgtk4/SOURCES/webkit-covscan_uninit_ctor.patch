--- webkitgtk-2.22.7/Source/JavaScriptCore/b3/air/AirAllocateRegistersByGraphColoring.cpp.covscan_uninit_ctor	2019-02-28 11:08:18.000000000 +0100
+++ webkitgtk-2.22.7/Source/JavaScriptCore/b3/air/AirAllocateRegistersByGraphColoring.cpp	2019-04-04 00:36:57.972556927 +0200
@@ -876,7 +876,7 @@ protected:
         }
 
     private:
-        unsigned m_positionInMoveList;
+        unsigned m_positionInMoveList { 0 };
         Vector<unsigned, 0, UnsafeVectorOverflow> m_moveList;
         Vector<unsigned, 0, UnsafeVectorOverflow> m_lowPriorityMoveList;
     };
--- webkitgtk-2.22.7/Source/JavaScriptCore/bytecode/PolymorphicAccess.h.covscan_uninit_ctor	2018-07-25 13:56:28.000000000 +0200
+++ webkitgtk-2.22.7/Source/JavaScriptCore/bytecode/PolymorphicAccess.h	2019-04-04 00:36:57.972556927 +0200
@@ -122,7 +122,7 @@ public:
     }
     
 private:
-    Kind m_kind;
+    Kind m_kind { MadeNoChanges };
     MacroAssemblerCodePtr<JITStubRoutinePtrTag> m_code;
     Vector<std::pair<InlineWatchpointSet&, StringFireDetail>> m_watchpointsToFire;
 };
--- webkitgtk-2.22.7/Source/JavaScriptCore/dfg/DFGOSRExit.h.covscan_uninit_ctor	2018-12-13 02:58:23.000000000 +0100
+++ webkitgtk-2.22.7/Source/JavaScriptCore/dfg/DFGOSRExit.h	2019-04-04 00:36:57.972556927 +0200
@@ -131,7 +131,7 @@ struct OSRExitState : RefCounted<OSRExit
     void* jumpTarget;
     ArrayProfile* arrayProfile;
 
-    ExtraInitializationLevel extraInitializationLevel;
+    ExtraInitializationLevel extraInitializationLevel { };
     Profiler::OSRExit* profilerExit { nullptr };
 };
 
--- webkitgtk-2.22.7/Source/JavaScriptCore/dfg/DFGPredictionPropagationPhase.cpp.covscan_uninit_ctor	2019-02-28 11:08:18.000000000 +0100
+++ webkitgtk-2.22.7/Source/JavaScriptCore/dfg/DFGPredictionPropagationPhase.cpp	2019-04-04 00:36:57.973556925 +0200
@@ -1274,7 +1274,7 @@ private:
     }
 
     Vector<Node*> m_dependentNodes;
-    Node* m_currentNode;
+    Node* m_currentNode { nullptr };
     bool m_changed { false };
     PredictionPass m_pass { PrimaryPass }; // We use different logic for considering predictions depending on how far along we are in propagation.
 };
--- webkitgtk-2.22.7/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp.covscan_uninit_ctor	2019-02-28 11:08:18.000000000 +0100
+++ webkitgtk-2.22.7/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp	2019-04-04 00:36:57.979556911 +0200
@@ -13860,8 +13860,8 @@ private:
             return stringLessThan(*string, *other.string);
         }
         
-        StringImpl* string;
-        LBasicBlock target;
+        StringImpl* string { nullptr };
+        LBasicBlock target { nullptr };
     };
     
     struct CharacterCase {
--- webkitgtk-2.22.7/Source/JavaScriptCore/parser/Nodes.h.covscan_uninit_ctor	2019-02-28 11:08:18.000000000 +0100
+++ webkitgtk-2.22.7/Source/JavaScriptCore/parser/Nodes.h	2019-04-04 00:36:57.982556905 +0200
@@ -2051,7 +2051,7 @@ namespace JSC {
         Identifier m_ident;
         Identifier m_ecmaName;
         Identifier m_inferredName;
-        FunctionMode m_functionMode;
+        FunctionMode m_functionMode { FunctionMode::FunctionExpression };
         unsigned m_startColumn;
         unsigned m_endColumn;
         int m_functionKeywordStart;
@@ -2061,7 +2061,7 @@ namespace JSC {
         SourceCode m_classSource;
         int m_startStartOffset;
         unsigned m_parameterCount;
-        int m_lastLine;
+        int m_lastLine { -1 };
     };
 
     class FunctionNode final : public ScopeNode {
--- webkitgtk-2.22.7/Source/JavaScriptCore/runtime/ConfigFile.cpp.covscan_uninit_ctor	2019-02-28 11:08:18.000000000 +0100
+++ webkitgtk-2.22.7/Source/JavaScriptCore/runtime/ConfigFile.cpp	2019-04-04 00:36:57.983556902 +0200
@@ -233,7 +233,7 @@ private:
 
     const char* m_filename;
     unsigned m_lineNumber;
-    FILE* m_file;
+    FILE* m_file { nullptr };
     char m_buffer[BUFSIZ];
     char* m_srcPtr;
     char* m_bufferEnd;
--- webkitgtk-2.22.7/Source/JavaScriptCore/runtime/ErrorInstance.h.covscan_uninit_ctor	2019-02-28 11:08:18.000000000 +0100
+++ webkitgtk-2.22.7/Source/JavaScriptCore/runtime/ErrorInstance.h	2019-04-04 00:36:57.984556900 +0200
@@ -97,8 +97,8 @@ protected:
 
     SourceAppender m_sourceAppender { nullptr };
     std::unique_ptr<Vector<StackFrame>> m_stackTrace;
-    unsigned m_line;
-    unsigned m_column;
+    unsigned m_line { 0 };
+    unsigned m_column { 0 };
     String m_sourceURL;
     String m_stackString;
     RuntimeType m_runtimeTypeForCause { TypeNothing };
--- webkitgtk-2.22.7/Source/JavaScriptCore/runtime/JSBigInt.h.covscan_uninit_ctor	2019-02-28 11:08:18.000000000 +0100
+++ webkitgtk-2.22.7/Source/JavaScriptCore/runtime/JSBigInt.h	2019-04-04 00:36:57.984556900 +0200
@@ -181,8 +181,8 @@ private:
     Digit digit(unsigned);
     void setDigit(unsigned, Digit);
         
-    unsigned m_length;
-    bool m_sign;
+    unsigned m_length { 0 };
+    bool m_sign { false };
 };
 
 inline JSBigInt* asBigInt(JSValue value)
--- webkitgtk-2.22.7/Source/JavaScriptCore/runtime/PropertySlot.h.covscan_uninit_ctor	2019-02-28 11:08:18.000000000 +0100
+++ webkitgtk-2.22.7/Source/JavaScriptCore/runtime/PropertySlot.h	2019-04-04 00:36:57.985556898 +0200
@@ -373,7 +373,7 @@ private:
     JS_EXPORT_PRIVATE JSValue customGetter(ExecState*, PropertyName) const;
     JS_EXPORT_PRIVATE JSValue customAccessorGetter(ExecState*, PropertyName) const;
 
-    unsigned m_attributes;
+    unsigned m_attributes { 0 };
     union {
         EncodedJSValue value;
         struct {
--- webkitgtk-2.22.7/Source/JavaScriptCore/wasm/js/WasmToJS.cpp.covscan_uninit_ctor	2019-02-28 11:08:18.000000000 +0100
+++ webkitgtk-2.22.7/Source/JavaScriptCore/wasm/js/WasmToJS.cpp	2019-04-04 00:36:57.986556896 +0200
@@ -264,7 +264,7 @@ Expected<MacroAssemblerCodeRef<WasmEntry
                 JSValue result = call(exec, callee, callType, callData, jsUndefined(), args);
                 RETURN_IF_EXCEPTION(throwScope, 0);
 
-                uint64_t realResult;
+                uint64_t realResult = 0;
                 switch (signature.returnType()) {
                 case Func:
                 case Anyfunc:
--- webkitgtk-2.22.7/Source/JavaScriptCore/wasm/WasmB3IRGenerator.cpp.covscan_uninit_ctor	2019-02-28 11:08:18.000000000 +0100
+++ webkitgtk-2.22.7/Source/JavaScriptCore/wasm/WasmB3IRGenerator.cpp	2019-04-04 00:36:57.988556891 +0200
@@ -148,10 +148,10 @@ public:
 
     private:
         friend class B3IRGenerator;
-        BlockType blockType;
-        BasicBlock* continuation;
-        BasicBlock* special;
-        ResultList result;
+        BlockType blockType { };
+        BasicBlock* continuation { nullptr };
+        BasicBlock* special { nullptr };
+        ResultList result { };
     };
 
     typedef Value* ExpressionType;
--- webkitgtk-2.22.7/Source/JavaScriptCore/wasm/WasmFormat.h.covscan_uninit_ctor	2019-02-28 11:08:18.000000000 +0100
+++ webkitgtk-2.22.7/Source/JavaScriptCore/wasm/WasmFormat.h	2019-04-04 00:36:57.988556891 +0200
@@ -226,7 +226,7 @@ public:
     std::optional<uint32_t> maximum() const { return m_maximum; }
 
 private:
-    uint32_t m_initial;
+    uint32_t m_initial { 0 };
     std::optional<uint32_t> m_maximum;
     bool m_isImport { false };
     bool m_isValid { false };
--- webkitgtk-2.22.7/Source/JavaScriptCore/wasm/WasmFunctionParser.h.covscan_uninit_ctor	2019-02-28 11:08:18.000000000 +0100
+++ webkitgtk-2.22.7/Source/JavaScriptCore/wasm/WasmFunctionParser.h	2019-04-04 00:36:57.989556889 +0200
@@ -87,7 +87,7 @@ private:
     const Signature& m_signature;
     const ModuleInformation& m_info;
 
-    OpType m_currentOpcode;
+    OpType m_currentOpcode { };
     size_t m_currentOpcodeStartingOffset { 0 };
 
     unsigned m_unreachableBlocks { 0 };
--- webkitgtk-2.22.7/Source/JavaScriptCore/wasm/WasmTierUpCount.h.covscan_uninit_ctor	2017-08-03 13:00:07.000000000 +0200
+++ webkitgtk-2.22.7/Source/JavaScriptCore/wasm/WasmTierUpCount.h	2019-04-04 00:36:57.990556886 +0200
@@ -65,7 +65,7 @@ public:
 
 private:
     uint32_t m_count;
-    Atomic<bool> m_tierUpStarted;
+    Atomic<bool> m_tierUpStarted { false };
 };
     
 } } // namespace JSC::Wasm
--- webkitgtk-2.22.7/Source/JavaScriptCore/wasm/WasmValidate.cpp.covscan_uninit_ctor	2019-02-28 11:08:18.000000000 +0100
+++ webkitgtk-2.22.7/Source/JavaScriptCore/wasm/WasmValidate.cpp	2019-04-04 00:36:57.990556886 +0200
@@ -72,8 +72,8 @@ public:
         Type signature() const { return m_signature; }
         Type branchTargetSignature() const { return type() == BlockType::Loop ? Void : signature(); }
     private:
-        BlockType m_blockType;
-        Type m_signature;
+        BlockType m_blockType { };
+        Type m_signature { };
     };
     typedef String ErrorType;
     typedef Unexpected<ErrorType> UnexpectedResult;
--- webkitgtk-2.22.7/Source/JavaScriptCore/yarr/YarrJIT.h.covscan_uninit_ctor	2019-02-28 11:08:18.000000000 +0100
+++ webkitgtk-2.22.7/Source/JavaScriptCore/yarr/YarrJIT.h	2019-04-04 00:36:57.990556886 +0200
@@ -201,7 +201,7 @@ private:
     MacroAssemblerCodeRef<YarrMatchOnly8BitPtrTag> m_matchOnly8;
     MacroAssemblerCodeRef<YarrMatchOnly16BitPtrTag> m_matchOnly16;
 #if ENABLE(YARR_JIT_ALL_PARENS_EXPRESSIONS)
-    bool m_usesPatternContextBuffer;
+    bool m_usesPatternContextBuffer { false };
 #endif
     std::optional<JITFailureReason> m_failureReason;
 };
--- webkitgtk-2.22.7/Source/WebCore/accessibility/AccessibilityTableColumn.h.covscan_uninit_ctor	2017-11-30 11:23:29.000000000 +0100
+++ webkitgtk-2.22.7/Source/WebCore/accessibility/AccessibilityTableColumn.h	2019-04-04 00:36:57.991556884 +0200
@@ -33,36 +33,36 @@
 #include "IntRect.h"
 
 namespace WebCore {
-    
+
 class RenderTableSection;
 
 class AccessibilityTableColumn final : public AccessibilityMockObject {
 public:
     static Ref<AccessibilityTableColumn> create();
     virtual ~AccessibilityTableColumn();
-    
+
     AccessibilityObject* headerObject();
-        
+
     AccessibilityRole roleValue() const override { return AccessibilityRole::Column; }
-    
+
     void setColumnIndex(int columnIndex) { m_columnIndex = columnIndex; }
-    int columnIndex() const { return m_columnIndex; }    
-    
+    int columnIndex() const { return m_columnIndex; }
+
     void addChildren() override;
     void setParent(AccessibilityObject*) override;
-    
+
     LayoutRect elementRect() const override;
-    
+
 private:
     AccessibilityTableColumn();
-    
+
     AccessibilityObject* headerObjectForSection(RenderTableSection*, bool thTagRequired);
     bool computeAccessibilityIsIgnored() const override;
     bool isTableColumn() const override { return true; }
 
-    unsigned m_columnIndex;
+    unsigned m_columnIndex { 0 };
 };
 
-} // namespace WebCore 
+} // namespace WebCore
 
 SPECIALIZE_TYPE_TRAITS_ACCESSIBILITY(AccessibilityTableColumn, isTableColumn())
--- webkitgtk-2.22.7/Source/WebCore/animation/DeclarativeAnimation.h.covscan_uninit_ctor	2019-02-28 11:08:20.000000000 +0100
+++ webkitgtk-2.22.7/Source/WebCore/animation/DeclarativeAnimation.h	2019-04-04 00:36:57.991556884 +0200
@@ -69,7 +69,7 @@ private:
     Ref<Animation> m_backingAnimation;
     bool m_wasPending { false };
     AnimationEffectReadOnly::Phase m_previousPhase { AnimationEffectReadOnly::Phase::Idle };
-    double m_previousIteration;
+    double m_previousIteration { 0.0 };
     GenericEventQueue m_eventQueue;
 };
 
--- webkitgtk-2.22.7/Source/WebCore/dom/RequestAnimationFrameCallback.h.covscan_uninit_ctor	2017-08-07 23:52:11.000000000 +0200
+++ webkitgtk-2.22.7/Source/WebCore/dom/RequestAnimationFrameCallback.h	2019-04-04 00:36:57.991556884 +0200
@@ -42,9 +42,9 @@ public:
 
     virtual CallbackResult<void> handleEvent(double highResTimeMs) = 0;
 
-    int m_id;
-    bool m_firedOrCancelled;
-    bool m_useLegacyTimeBase;
+    int m_id { 0 };
+    bool m_firedOrCancelled { false };
+    bool m_useLegacyTimeBase { false };
 };
 
 } // namespace WebCore
--- webkitgtk-2.22.7/Source/WebCore/html/HTMLMediaElement.cpp.covscan_uninit_ctor	2019-02-28 11:08:20.000000000 +0100
+++ webkitgtk-2.22.7/Source/WebCore/html/HTMLMediaElement.cpp	2019-04-04 00:36:57.993556880 +0200
@@ -2147,9 +2147,10 @@ bool HTMLMediaElement::isSafeToLoadURL(c
 
     RefPtr<Frame> frame = document().frame();
     if (!frame || !document().securityOrigin().canDisplay(url)) {
-        if (actionIfInvalid == Complain)
+        if (actionIfInvalid == Complain) {
             FrameLoader::reportLocalLoadFailed(frame.get(), url.stringCenterEllipsizedToLength());
             ERROR_LOG(LOGIDENTIFIER, url , " was rejected by SecurityOrigin");
+        }
         return false;
     }
 
--- webkitgtk-2.22.7/Source/WebCore/html/HTMLMenuElement.h.covscan_uninit_ctor	2018-07-25 13:56:31.000000000 +0200
+++ webkitgtk-2.22.7/Source/WebCore/html/HTMLMenuElement.h	2019-04-04 00:36:57.994556878 +0200
@@ -40,7 +40,7 @@ private:
     void removedFromAncestor(RemovalType, ContainerNode&) final;
     void parseAttribute(const QualifiedName&, const AtomicString&) final;
 
-    bool m_isTouchBarMenu;
+    bool m_isTouchBarMenu { false };
 };
 
 } // namespace WebCore
--- webkitgtk-2.22.7/Source/WebCore/Modules/webaudio/AudioProcessingEvent.h.covscan_uninit_ctor	2018-07-25 13:56:30.000000000 +0200
+++ webkitgtk-2.22.7/Source/WebCore/Modules/webaudio/AudioProcessingEvent.h	2019-04-04 00:36:57.994556878 +0200
@@ -58,7 +58,7 @@ private:
 
     RefPtr<AudioBuffer> m_inputBuffer;
     RefPtr<AudioBuffer> m_outputBuffer;
-    double m_playbackTime;
+    double m_playbackTime { 0.0 };
 };
 
 } // namespace WebCore
--- webkitgtk-2.22.7/Source/WebCore/Modules/webaudio/DelayDSPKernel.h.covscan_uninit_ctor	2018-07-25 13:56:30.000000000 +0200
+++ webkitgtk-2.22.7/Source/WebCore/Modules/webaudio/DelayDSPKernel.h	2019-04-04 00:36:57.994556878 +0200
@@ -49,12 +49,12 @@ public:
 
 private:
     AudioFloatArray m_buffer;
-    double m_maxDelayTime;
+    double m_maxDelayTime { 0.0 };
     int m_writeIndex;
-    double m_currentDelayTime;
-    double m_smoothingRate;
+    double m_currentDelayTime { 0.0 };
+    double m_smoothingRate { 0.0 };
     bool m_firstTime;
-    double m_desiredDelayFrames;
+    double m_desiredDelayFrames { 0.0 };
 
     AudioFloatArray m_delayTimes;
 
--- webkitgtk-2.22.7/Source/WebCore/platform/animation/AnimationTrigger.h.covscan_uninit_ctor	2019-02-28 11:08:20.000000000 +0100
+++ webkitgtk-2.22.7/Source/WebCore/platform/animation/AnimationTrigger.h	2019-04-04 00:36:57.994556878 +0200
@@ -131,7 +131,7 @@ private:
 
     Length m_startValue;
     Length m_endValue;
-    bool m_hasEndValue;
+    bool m_hasEndValue { false };
 };
 
 } // namespace WebCore
--- webkitgtk-2.22.7/Source/WebCore/platform/graphics/ANGLEWebKitBridge.h.covscan_uninit_ctor	2018-07-25 13:56:31.000000000 +0200
+++ webkitgtk-2.22.7/Source/WebCore/platform/graphics/ANGLEWebKitBridge.h	2019-04-04 00:36:57.995556875 +0200
@@ -92,7 +92,7 @@ private:
     ShShaderOutput m_shaderOutput;
     ShShaderSpec m_shaderSpec;
 
-    ShBuiltInResources m_resources;
+    ShBuiltInResources m_resources { };
 };
 
 } // namespace WebCore
--- webkitgtk-2.22.7/Source/WebCore/platform/graphics/GradientImage.h.covscan_uninit_ctor	2019-02-28 11:08:20.000000000 +0100
+++ webkitgtk-2.22.7/Source/WebCore/platform/graphics/GradientImage.h	2019-04-04 00:36:57.995556875 +0200
@@ -54,7 +54,7 @@ private:
     Ref<Gradient> m_gradient;
     std::unique_ptr<ImageBuffer> m_cachedImageBuffer;
     FloatSize m_cachedAdjustedSize;
-    unsigned m_cachedGeneratorHash;
+    unsigned m_cachedGeneratorHash { 0 };
 };
 
 }
--- webkitgtk-2.22.7/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.cpp.covscan_uninit_ctor	2019-02-28 11:08:20.000000000 +0100
+++ webkitgtk-2.22.7/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.cpp	2019-04-04 00:36:57.995556875 +0200
@@ -269,7 +269,7 @@ private:
     GstBuffer* m_buffer;
     GstVideoFrame m_videoFrame { };
     IntSize m_size;
-    bool m_hasAlphaChannel;
+    bool m_hasAlphaChannel { false };
     TextureMapperGL::Flags m_flags { };
     GLuint m_textureID { 0 };
     bool m_isMapped { false };
--- webkitgtk-2.22.7/Source/WebCore/platform/graphics/texmap/TextureMapperPlatformLayerBuffer.h.covscan_uninit_ctor	2019-02-28 11:08:20.000000000 +0100
+++ webkitgtk-2.22.7/Source/WebCore/platform/graphics/texmap/TextureMapperPlatformLayerBuffer.h	2019-04-04 00:36:57.996556873 +0200
@@ -72,7 +72,7 @@ private:
 
     GLuint m_textureID;
     IntSize m_size;
-    GLint m_internalFormat;
+    GLint m_internalFormat { 0 };
     TextureMapperGL::Flags m_extraFlags;
     bool m_hasManagedTexture;
     std::unique_ptr<UnmanagedBufferDataHolder> m_unmanagedBufferDataHolder;
--- webkitgtk-2.22.7/Source/WebCore/platform/gtk/ScrollbarThemeGtk.h.covscan_uninit_ctor	2017-08-03 13:00:08.000000000 +0200
+++ webkitgtk-2.22.7/Source/WebCore/platform/gtk/ScrollbarThemeGtk.h	2019-04-04 00:36:57.996556873 +0200
@@ -61,10 +61,10 @@ public:
 private:
     void updateThemeProperties();
 
-    bool m_hasForwardButtonStartPart : 1;
-    bool m_hasForwardButtonEndPart : 1;
-    bool m_hasBackButtonStartPart : 1;
-    bool m_hasBackButtonEndPart : 1;
+    bool m_hasForwardButtonStartPart { true };
+    bool m_hasForwardButtonEndPart { true };
+    bool m_hasBackButtonStartPart { true };
+    bool m_hasBackButtonEndPart { true };
     bool m_usesOverlayScrollbars { false };
 #endif // GTK_API_VERSION_2
 };
--- webkitgtk-2.22.7/Source/WebCore/platform/image-decoders/jpeg/JPEGImageDecoder.cpp.covscan_uninit_ctor	2018-07-25 13:56:31.000000000 +0200
+++ webkitgtk-2.22.7/Source/WebCore/platform/image-decoders/jpeg/JPEGImageDecoder.cpp	2019-04-04 00:36:57.996556873 +0200
@@ -454,10 +454,10 @@ private:
     JPEGImageDecoder* m_decoder;
     unsigned m_bufferLength;
     int m_bytesToSkip;
-    bool m_decodingSizeOnly;
+    bool m_decodingSizeOnly { false };
 
     jpeg_decompress_struct m_info;
-    decoder_error_mgr m_err;
+    decoder_error_mgr m_err { };
     jstate m_state;
 
     JSAMPARRAY m_samples;
--- webkitgtk-2.22.7/Source/WebCore/platform/text/TextCodecUTF16.h.covscan_uninit_ctor	2017-12-08 10:40:05.000000000 +0100
+++ webkitgtk-2.22.7/Source/WebCore/platform/text/TextCodecUTF16.h	2019-04-04 00:36:57.996556873 +0200
@@ -42,7 +42,7 @@ private:
 
     bool m_littleEndian;
     bool m_haveBufferedByte { false };
-    unsigned char m_bufferedByte;
+    unsigned char m_bufferedByte { 0 };
 };
 
 } // namespace WebCore
--- webkitgtk-2.22.7/Source/WebCore/rendering/RenderFragmentedFlow.h.covscan_uninit_ctor	2019-02-28 11:08:20.000000000 +0100
+++ webkitgtk-2.22.7/Source/WebCore/rendering/RenderFragmentedFlow.h	2019-04-04 00:36:57.997556871 +0200
@@ -227,7 +227,7 @@ protected:
     private:
         WeakPtr<RenderFragmentContainer> m_startFragment;
         WeakPtr<RenderFragmentContainer> m_endFragment;
-        bool m_rangeInvalidated;
+        bool m_rangeInvalidated { false };
     };
 
     typedef PODInterval<LayoutUnit, WeakPtr<RenderFragmentContainer>> FragmentInterval;
--- webkitgtk-2.22.7/Source/WebCore/workers/WorkerScriptLoader.h.covscan_uninit_ctor	2019-02-28 11:08:21.000000000 +0100
+++ webkitgtk-2.22.7/Source/WebCore/workers/WorkerScriptLoader.h	2019-04-04 02:33:14.873693134 +0200
@@ -92,7 +92,7 @@ private:
     URL m_url;
     URL m_responseURL;
     String m_responseMIMEType;
-    FetchOptions::Destination m_destination;
+    FetchOptions::Destination m_destination { FetchOptions::Destination::EmptyString };
     ContentSecurityPolicyResponseHeaders m_contentSecurityPolicy;
     unsigned long m_identifier { 0 };
     bool m_failed { false };
--- webkitgtk-2.22.7/Source/WebKit/Shared/Plugins/PluginProcessCreationParameters.h.covscan_uninit_ctor	2018-07-25 13:56:32.000000000 +0200
+++ webkitgtk-2.22.7/Source/WebKit/Shared/Plugins/PluginProcessCreationParameters.h	2019-04-04 00:36:57.997556871 +0200
@@ -47,7 +47,7 @@ struct PluginProcessCreationParameters {
     void encode(IPC::Encoder&) const;
     static bool decode(IPC::Decoder&, PluginProcessCreationParameters&);
 
-    PluginProcessType processType;
+    PluginProcessType processType { PluginProcessTypeNormal };
     bool supportsAsynchronousPluginInitialization;
 
     Seconds minimumLifetime;
--- webkitgtk-2.22.7/Source/WebKit/UIProcess/API/glib/IconDatabase.h.covscan_uninit_ctor	2017-12-15 21:47:29.000000000 +0100
+++ webkitgtk-2.22.7/Source/WebKit/UIProcess/API/glib/IconDatabase.h	2019-04-04 00:36:57.997556871 +0200
@@ -226,7 +226,7 @@ private:
 
         Deque<Function<void()>> m_notificationQueue;
         Lock m_notificationQueueLock;
-        Atomic<bool> m_isActive;
+        Atomic<bool> m_isActive { false };
         RunLoop::Timer<MainThreadNotifier> m_timer;
     };
 
